[{"path":"https://a-helbig.github.io/nepstools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 nepstools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"nepstools","text":"nepstools package provides convenient functions work NEPS Scientific Use Files (SUFs). inspired stata ado nepstools developed Forschungsdatenzentrum LifBi Bamberg. vignette introduces key functionalities : Reading NEPS data files read_neps() Replacing NEPS-specific missing codes NA replace_values_with_na() Recoding season codes corresponding calendar months replace_season_codes() Expanding episode data episode duration expand() Extracting variable question texts question() Search keywords attributes variables lookfor_meta()","code":""},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"reading-neps-data","dir":"Articles","previous_headings":"","what":"1. Reading NEPS data","title":"nepstools","text":"core package read_neps() function. reads data NEPS Scientific Use File dta-format attaches associated metadata labels, question texts, harmonization rules. core, function uses read_dta() tidyverse package haven, performant larger datasets compared dta-readers. however support reading () attached meta information NEPS-SUF-Files. task function read.dta13() package readstata13 utilized. Since read rows dataset get access meta information, performance large datasets isnt issue. argument english set TRUE, variable value labels well attached meta information switched German (default) English: argument compact_meta set TRUE (default), following meta infos attached available: questiontext, interview-instruction-text, harmonization rule alias. set FALSE, available meta infos attached. argument charren set TRUE, variable names replaced instrument names available. instrument names may intuitive NEPS data users, often self-explanatory.","code":"library(nepstools)  # File path to publicly available NEPS semantic file on gaps in lifecourse that is included in this package path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\")  # read data with english labels and meta df_neps <- read_neps(path, english = TRUE) # Access label and questiontext attribute of a variable attr(df_neps$ts2912m, \"label\") #> [1] \"End month gap\" attr(df_neps$ts2912m, \"NEPS_questiontext\") #> [1] \"(Until when were you <h_modak>?)\"  # read data with german labels and meta df_neps <- read_neps(path, english = FALSE) # Access label and questiontext attribute of a variable attr(df_neps$ts2912m, \"label\") #> [1] \"Endmonat Lücke\" attr(df_neps$ts2912m, \"NEPS_questiontext\") #> [1] \"(Bis wann waren Sie <h_modak>?)\" # read data with minimum available meta info df_neps <- read_neps(path, compact_meta = TRUE) # show how many attributes are being attached to the data length(attributes(df_neps$ts2912m)) #> [1] 8  # read data with all available meta info df_neps <- read_neps(path, compact_meta = FALSE) # show how many attributes are being attached to the data length(attributes(df_neps$ts2912m)) #> [1] 19 # read data with minimum available meta info df_neps <- read_neps(path, charren = TRUE) # print names of dataset print(df_neps) #> # A tibble: 1 × 36 #>    ID_t wave      nepswave  splink spell subspell spgen    spext spstat disagint #>   <dbl> <dbl+lbl> <dbl+lbl>  <dbl> <dbl>    <dbl> <dbl+lb> <dbl> <dbl+> <dbl+lb> #> 1    NA NA        NA            NA    NA       NA NA       NA    NA     NA       #> # ℹ 26 more variables: disagwave <dbl+lbl>, lutyp_v1 <dbl+lbl>, #> #   h_aktlue <dbl+lbl>, lumod <dbl+lbl>, lutyp <dbl+lbl>, lutyps <chr>, #> #   lustm <dbl+lbl>, lustj <dbl+lbl>, luendre <dbl+lbl>, luendm <dbl+lbl>, #> #   luendj <dbl+lbl>, luiz <dbl+lbl>, lustm_g1 <dbl+lbl>, lustj_g1 <dbl+lbl>, #> #   luendm_g1 <dbl+lbl>, luendj_g1 <dbl+lbl>, luiz_g1 <dbl+lbl>, #> #   spms <dbl+lbl>, lufb <dbl+lbl>, kieuaf12 <dbl+lbl>, kieubeeg <dbl+lbl>, #> #   kieuetstm <dbl+lbl>, kieuetstj <dbl+lbl>, kieuaf2 <dbl+lbl>, …  # read data with all available meta infos df_neps <- read_neps(path, charren = FALSE) # print names of dataset print(df_neps) #> # A tibble: 1 × 36 #>    ID_t wave      nepswave  splink spell subspell spgen    spext spstat disagint #>   <dbl> <dbl+lbl> <dbl+lbl>  <dbl> <dbl>    <dbl> <dbl+lb> <dbl> <dbl+> <dbl+lb> #> 1    NA NA        NA            NA    NA       NA NA       NA    NA     NA       #> # ℹ 26 more variables: disagwave <dbl+lbl>, ts29101_v1 <dbl+lbl>, #> #   ts29901 <dbl+lbl>, ts29300 <dbl+lbl>, ts29101 <dbl+lbl>, ts29102_O <chr>, #> #   ts2911m <dbl+lbl>, ts2911y <dbl+lbl>, ts29103 <dbl+lbl>, ts2912m <dbl+lbl>, #> #   ts2912y <dbl+lbl>, ts2912c <dbl+lbl>, ts2911m_g1 <dbl+lbl>, #> #   ts2911y_g1 <dbl+lbl>, ts2912m_g1 <dbl+lbl>, ts2912y_g1 <dbl+lbl>, #> #   ts2912c_g1 <dbl+lbl>, spms <dbl+lbl>, ts29201 <dbl+lbl>, ts27108 <dbl+lbl>, #> #   ts27100 <dbl+lbl>, ts2731m <dbl+lbl>, ts2731y <dbl+lbl>, …"},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"replacing-neps-missing-values-with-na","dir":"Articles","previous_headings":"","what":"2. Replacing NEPS missing values with NA","title":"nepstools","text":"NEPS datasets use various negative codes indicate different types missing values. replace_values_with_na() function replaces codes NA easier handling R. want variables considered function, can specify variables vars argument. addition can provide custom missing value codes considered argument values_to_replace. Note, function also works vectors.","code":"# read data with variables: \"ID\" and \"enddate of episode\" df_neps <- read_neps(path, col_select = c(\"ID_t\", \"ts2912m\"))  # create some artificial datapoints  artificial_datapoints <- data.frame(   ID_t = c(1, 2, 3, 4, 5),   ts2912m = c(-97, 12, NA, 4, -98) )  # add these artificial datapoints to the empty neps dataset df_neps <- rbind(df_neps, artificial_datapoints) print(df_neps) #> # A tibble: 6 × 2 #>    ID_t ts2912m                 #>   <dbl> <dbl+lbl>               #> 1    NA  NA                     #> 2     1 -97 [Angabe verweigert] #> 3     2  12 [Dezember]          #> 4     3  NA                     #> 5     4   4 [April]             #> 6     5 -98 [weiß nicht]  # now use the replace_values_with_na function df_clean <- replace_values_with_na(df_neps) print(df_clean) #> # A tibble: 6 × 2 #>    ID_t ts2912m       #>   <dbl> <dbl+lbl>     #> 1    NA NA            #> 2     1 NA            #> 3     2 12 [Dezember] #> 4     3 NA            #> 5     4  4 [April]    #> 6     5 NA"},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"recoding-season-codes-to-corresponding-months","dir":"Articles","previous_headings":"","what":"3. Recoding season codes to corresponding months","title":"nepstools","text":"NEPS study, respondents can answer questions date events seasons instead exact months. codes seasons 21,24,27,30 32 correspond January (1 + 20), April (4 + 20) . Use function replace_season_codes() revert season codes standard month codes. Note vars argument NULL (default), variables label attributes containing “month” “monat” processed. Alternatively, can explicitly specify variables include.","code":"# read data with variables: \"ID\" and \"enddate of episode\" df_neps <- read_neps(path, col_select = c(\"ID_t\", \"ts2912m\"))  # create some artificial datapoints  artificial_datapoints <- data.frame(   ID_t = c(1, 2, 3, 4, 5),   ts2912m = c(24, 12, 32, 4, -98) )  # add these artificial datapoints to the empty neps dataset df_neps <- rbind(df_neps, artificial_datapoints) print(df_neps) #> # A tibble: 6 × 2 #>    ID_t ts2912m               #>   <dbl> <dbl+lbl>             #> 1    NA  NA                   #> 2     1  24 [Frühjahr/Ostern] #> 3     2  12 [Dezember]        #> 4     3  32 [Jahresende]      #> 5     4   4 [April]           #> 6     5 -98 [weiß nicht]  df_month_recoded <- replace_season_codes(df_neps) print(df_month_recoded) #> # A tibble: 6 × 2 #>    ID_t ts2912m          #>   <dbl> <dbl+lbl>        #> 1    NA  NA              #> 2     1   4 [April]      #> 3     2  12 [Dezember]   #> 4     3  12 [Dezember]   #> 5     4   4 [April]      #> 6     5 -98 [weiß nicht]"},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"expanding-episode-data-by-duration","dir":"Articles","previous_headings":"","what":"4. Expanding episode data by duration","title":"nepstools","text":"Often, episodes spells recorded durations months years. expand() function replicates rows according length specified duration variable. function inspired statas expand function.","code":"# read data with variables: \"ID\" and \"enddate of episode\" df_neps <- read_neps(path, col_select = c(\"ID_t\", \"ts2911m\", \"ts2911y\", \"ts2912m\", \"ts2912y\")) df_neps <- df_neps[-1,] # get rid of NA row that is in every semantic structure file from NEPS  # create some artificial datapoints  artificial_datapoints <- data.frame(   ID_t = c(1, 2, 3, 4, 5),   ts2911m = c(2, 12, 11, 4, 12),   ts2911y = c(2008, 2006, 2005, 2009, 2010),   ts2912m = c(4, 1, 2, 5, 2),   ts2912y = c(2008, 2007, 2006, 2009, 2011) )  # add these artificial datapoints to the empty neps dataset df_neps <- rbind(df_neps, artificial_datapoints)  # generate date and duration variables df_neps <- df_neps |>    dplyr::mutate(start = ((ts2911y-1960)*12)+ts2911m - 1, # months since january 1960                 end = ((ts2912y-1960)*12)+ts2912m - 1, # months since january 1960                 duration = (end - start) + 1) # + 1 required so we dont get episode durations of 0 months  print(df_neps) #>   ID_t ts2911m ts2911y ts2912m ts2912y start end duration #> 1    1       2    2008       4    2008   577 579        3 #> 2    2      12    2006       1    2007   563 564        2 #> 3    3      11    2005       2    2006   550 553        4 #> 4    4       4    2009       5    2009   591 592        2 #> 5    5      12    2010       2    2011   611 613        3  # expand the dataframe expanded_df <- nepstools::expand(df_neps, duration) print(expanded_df) #>     ID_t ts2911m ts2911y ts2912m ts2912y start end duration #> 1      1       2    2008       4    2008   577 579        3 #> 1.1    1       2    2008       4    2008   577 579        3 #> 1.2    1       2    2008       4    2008   577 579        3 #> 2      2      12    2006       1    2007   563 564        2 #> 2.1    2      12    2006       1    2007   563 564        2 #> 3      3      11    2005       2    2006   550 553        4 #> 3.1    3      11    2005       2    2006   550 553        4 #> 3.2    3      11    2005       2    2006   550 553        4 #> 3.3    3      11    2005       2    2006   550 553        4 #> 4      4       4    2009       5    2009   591 592        2 #> 4.1    4       4    2009       5    2009   591 592        2 #> 5      5      12    2010       2    2011   611 613        3 #> 5.1    5      12    2010       2    2011   611 613        3 #> 5.2    5      12    2010       2    2011   611 613        3  # create month indicator - May use a package like lubridate to get a nicer formating for date variables. expanded_df <- expanded_df |>    dplyr::group_by(ID_t) |>    dplyr::mutate(month = dplyr::first(start) + dplyr::row_number() - 1) print(expanded_df) #> # A tibble: 14 × 9 #> # Groups:   ID_t [5] #>     ID_t ts2911m ts2911y ts2912m ts2912y start   end duration month #>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>    <dbl> <dbl> #>  1     1       2    2008       4    2008   577   579        3   577 #>  2     1       2    2008       4    2008   577   579        3   578 #>  3     1       2    2008       4    2008   577   579        3   579 #>  4     2      12    2006       1    2007   563   564        2   563 #>  5     2      12    2006       1    2007   563   564        2   564 #>  6     3      11    2005       2    2006   550   553        4   550 #>  7     3      11    2005       2    2006   550   553        4   551 #>  8     3      11    2005       2    2006   550   553        4   552 #>  9     3      11    2005       2    2006   550   553        4   553 #> 10     4       4    2009       5    2009   591   592        2   591 #> 11     4       4    2009       5    2009   591   592        2   592 #> 12     5      12    2010       2    2011   611   613        3   611 #> 13     5      12    2010       2    2011   611   613        3   612 #> 14     5      12    2010       2    2011   611   613        3   613"},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"extracting-question-texts","dir":"Articles","previous_headings":"","what":"5. Extracting question texts","title":"nepstools","text":"NEPS variables come attached metadata, including question texts German English. Use convenient wrapper question() print question text specified variable. language depend argument english (TRUE FALSE) read_neps() function.","code":"# read data with variables: \"ID\" and \"enddate of episode\" df_neps <- read_neps(path, col_select = c(\"ID_t\", \"ts2912m\"))  question(df_neps, \"ts2912m\") #> [1] \"(Bis wann waren Sie <h_modak>?)\""},{"path":"https://a-helbig.github.io/nepstools/articles/nepstools.html","id":"search-for-keywords-in-attributes-of-dataframe-columns-meta-info","dir":"Articles","previous_headings":"","what":"6. Search for keywords in attributes of dataframe columns (meta info)","title":"nepstools","text":"function lookfor_meta() searches attached attributes variable dataframe loaded read_neps() specified keywords. case insensitive default.","code":"# read data with variables: \"ID\" and \"enddate of episode\" df_neps <- read_neps(path, english = TRUE)  # Search for keyword \"type\" to identify all variables dealing with the type of the gap episode in one way or another lookfor_meta(df_neps, \"type\") #> $`Variable ts29101_v1: @label` #> [1] \"Type of gap\" #>  #> $`Variable ts29101: @label` #> [1] \"Type of gap\" #>  #> $`Variable ts29101: @NEPS_questiontext_en` #> [1] \"[AUTO] Type of gap episode\" #>  #> $`Variable spms: @label` #> [1] \"Check module: spell type\"  # Search for keyword \"retirement\" to identify all variables dealing with the type of the gap episode in one way or another lookfor_meta(df_neps, \"retirement\") #> $`Variable ts29103: @label` #> [1] \"Ongoing of retirement episode\""},{"path":"https://a-helbig.github.io/nepstools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Helbig. Author, maintainer.","code":""},{"path":"https://a-helbig.github.io/nepstools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Helbig (2025). nepstools: Simplifies working NEPS data. R package version 0.1.0, https://-helbig.github.io/nepstools/.","code":"@Manual{,   title = {nepstools: Simplifies working with NEPS data},   author = {Alexander Helbig},   year = {2025},   note = {R package version 0.1.0},   url = {https://a-helbig.github.io/nepstools/}, }"},{"path":"https://a-helbig.github.io/nepstools/index.html","id":"nepstools","dir":"","previous_headings":"","what":"Simplifies working with NEPS data","title":"Simplifies working with NEPS data","text":"package facilitates working R NEPS SUF data. main feature — core package — function efficiently reads NEPS SUF files statas dta format. allows specify German English language, switch instrument variable names access attached meta information variables. builds upon haven’s read_dta() readstata13’s read.dta13() functions, leveraging strengths . package inspired stata ado nepstools developed FDZ Lifbi Bamberg, Germany.","code":""},{"path":"https://a-helbig.github.io/nepstools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simplifies working with NEPS data","text":"can install development version nepstools remotes package like :","code":"# install.packages(\"remotes\") - uncomment this row in case you havent installed package \"remotes\" yet remotes::install_github(\"a-helbig/nepstools\")"},{"path":"https://a-helbig.github.io/nepstools/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simplifies working with NEPS data","text":"need load NEPS dataset includes variable value labels English, also want access question texts associated variables. Using haven::read_dta() provide access English labels question texts. also tried readstata13::read.dta13(), although loads metadata (including English labels), attached dataset level, directly variables. Additionally, function tends relatively slow working larger datasets. achieve goal, can use read_neps() function demonstrated : addition package provides handful smaller functions facilitate working NEPS data: replace_values_with_na(): replacing NEPS missing values NA replace_season_codes(): recoding season codes corresponding months expand(): expanding episode data duration question(): convenient wrapper printing question texts lookfor_meta(): searching keywords attributes dataframe columns (meta info) details, please checkout nepstools vignette.","code":"library(nepstools)  # File path to publicly available NEPS SC6 semantic structural file on gaps in lifecourse that is included in this package path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\")  # read data with english labels and meta df_neps <- read_neps(path, english = TRUE)  # Example Variable: ts2912m - enddate (month) of gap episode # Print english variable label  attr(df_neps$ts2912m, \"label\") #> [1] \"End month gap\" # Print english questiontext with convenient wrapper nepstools::question() question(df_neps, \"ts29103\") #> [1] \"Just to make sure: Are you still retired today?\""},{"path":"https://a-helbig.github.io/nepstools/reference/expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand data — expand","title":"Expand data — expand","text":"`expand()` duplicates rows integer variable specified duration argument, typically months counter. inspired statas expand function often used context episode data must transformed monthly data.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand data — expand","text":"","code":"expand(data, duration)"},{"path":"https://a-helbig.github.io/nepstools/reference/expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand data — expand","text":"data dataframe. duration Specify integer variable used expanding data. can provide variable either quoted string unquoted name. Typically, duration (e.g., episode length) variable. must numeric vector containing non-negative integers, missing (NA) values.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand data — expand","text":"Dataframe.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand data — expand","text":"","code":"df <- data.frame(id = 1:3, duration = c(2, 1, 3)) expand(df, duration) #>     id duration #> 1    1        2 #> 1.1  1        2 #> 2    2        1 #> 3    3        3 #> 3.1  3        3 #> 3.2  3        3"},{"path":"https://a-helbig.github.io/nepstools/reference/lookfor_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for keywords in attributes of variables — lookfor_meta","title":"Search for keywords in attributes of variables — lookfor_meta","text":"function searches attributes column (variable) data frame specified keyword(s) returns named list attribute values contain search words. Data frame-level attributes **searched**. search case-insensitive default.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/lookfor_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for keywords in attributes of variables — lookfor_meta","text":"","code":"lookfor_meta(df, search_words, ignore.case = TRUE)"},{"path":"https://a-helbig.github.io/nepstools/reference/lookfor_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for keywords in attributes of variables — lookfor_meta","text":"df data frame whose columns' attributes searched. search_words character vector one keywords search within attributes. ignore.case Logical; TRUE (default), search case-insensitive.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/lookfor_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for keywords in attributes of variables — lookfor_meta","text":"named list matched attribute values. names describe match found : \"Variable <column_name>: @<attribute_name>\" matches found, function prints message returns NULL.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/lookfor_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for keywords in attributes of variables — lookfor_meta","text":"","code":"# Example with NEPS SC6 semantic structures spGap file path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\") df_neps <- read_neps(path, english = TRUE)  # Search for keyword \"type\" to identify all variables dealing with the type of the gap in some way lookfor_meta(df_neps, \"type\") #> $`Variable ts29101_v1: @label` #> [1] \"Type of gap\" #>  #> $`Variable ts29101: @label` #> [1] \"Type of gap\" #>  #> $`Variable ts29101: @NEPS_questiontext_en` #> [1] \"[AUTO] Type of gap episode\" #>  #> $`Variable spms: @label` #> [1] \"Check module: spell type\" #>"},{"path":"https://a-helbig.github.io/nepstools/reference/question.html","id":null,"dir":"Reference","previous_headings":"","what":"Print questiontext — question","title":"Print questiontext — question","text":"`question()` convenient wrapper attr() function. prints attached questiontext specified variable variable argument console.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/question.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print questiontext — question","text":"","code":"question(data, variable)"},{"path":"https://a-helbig.github.io/nepstools/reference/question.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print questiontext — question","text":"data Specify dataset generated read_neps function variable Specify variable question text printed. Argument can string unquoted variable name.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/question.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print questiontext — question","text":"String.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/question.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print questiontext — question","text":"","code":"# Example with NEPS SC6 semantic structures spGap file path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\") df_neps <- read_neps(path, english = TRUE, col_select = c(\"ID_t\", \"ts2912m\"))  question(df_neps, \"ts2912m\") #> [1] \"(Until when were you <h_modak>?)\""},{"path":"https://a-helbig.github.io/nepstools/reference/read_exp_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper to extract meta info from data — read_exp_fields","title":"A helper to extract meta info from data — read_exp_fields","text":"helper extract meta info data","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/read_exp_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper to extract meta info from data — read_exp_fields","text":"","code":"read_exp_fields(datapath, cols = NULL, attr_type = NULL, only_value = F)"},{"path":"https://a-helbig.github.io/nepstools/reference/read_neps.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NEPS SUF files in .dta format — read_neps","title":"Read NEPS SUF files in .dta format — read_neps","text":"`read_neps()` reads NEPS SUF data .dta file format attracts available meta infos variable. Select variables col_select, specify language: German (default) English lastly specify important meta info (default) attracted .","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/read_neps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NEPS SUF files in .dta format — read_neps","text":"","code":"read_neps(   datasetpath,   col_select = NULL,   english = FALSE,   compact_meta = TRUE,   charren = FALSE )"},{"path":"https://a-helbig.github.io/nepstools/reference/read_neps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NEPS SUF files in .dta format — read_neps","text":"datasetpath datapath NEPS data file col_select Specify variables included dataset. set NULL, data loaded available variables. english set TRUE, dataset loaded English variable value labels, metadata. set FALSE, German labels metadata used instead. compact_meta set TRUE, selection important metadata added data, including question texts, interviewer texts, harmonization rules, instrument variable names. set FALSE, available metadata included. charren set TRUE, instrument variable names replace standard variable names. set FALSE, standard variable names retained.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/read_neps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NEPS SUF files in .dta format — read_neps","text":"Dataframe.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/read_neps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NEPS SUF files in .dta format — read_neps","text":"","code":"path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\") df <- read_neps(path, english = TRUE, charren = TRUE) print(names(df)) #>  [1] \"ID_t\"      \"wave\"      \"nepswave\"  \"splink\"    \"spell\"     \"subspell\"  #>  [7] \"spgen\"     \"spext\"     \"spstat\"    \"disagint\"  \"disagwave\" \"lutyp_v1\"  #> [13] \"h_aktlue\"  \"lumod\"     \"lutyp\"     \"lutyps\"    \"lustm\"     \"lustj\"     #> [19] \"luendre\"   \"luendm\"    \"luendj\"    \"luiz\"      \"lustm_g1\"  \"lustj_g1\"  #> [25] \"luendm_g1\" \"luendj_g1\" \"luiz_g1\"   \"spms\"      \"lufb\"      \"kieuaf12\"  #> [31] \"kieubeeg\"  \"kieuetstm\" \"kieuetstj\" \"kieuaf2\"   \"kieuaf4\"   \"kieuaf6\"   attr(df$luendm, \"NEPS_questiontext_\") #> [1] \"(Until when were you <h_modak>?)\""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_season_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace season codes with months — replace_season_codes","title":"Replace season codes with months — replace_season_codes","text":"`replace_season_codes()` replaces NEPS specific season codes date variables standard month codes. example code 27: \"Summer\" replaced Code 7: \"July\".","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_season_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace season codes with months — replace_season_codes","text":"","code":"replace_season_codes(   data,   vars = NULL,   values_to_replace = c(21, 24, 27, 30, 32) )"},{"path":"https://a-helbig.github.io/nepstools/reference/replace_season_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace season codes with months — replace_season_codes","text":"data dataset apply function . vars Specify vars season codes replaced months. Optional, set NULL, vars taken account, can lead problems case non-date variables. values_to_replace season codes. Usually doesnt need modified.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_season_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace season codes with months — replace_season_codes","text":"Dataframe.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_season_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace season codes with months — replace_season_codes","text":"","code":"# Example with NEPS SC6 semantic structures spGap file path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\") df_neps <- read_neps(path, english = TRUE, col_select = c(\"ID_t\", \"ts2912m\"))  # create some artificial datapoints artificial_datapoints <- data.frame(  ID_t = c(1, 2, 3, 24, 5),  ts2912m = c(-97, 24, 5, 32, 30))  # add these artificial datapoints to the empty neps dataset df_neps <- rbind(df_neps, artificial_datapoints) print(df_neps) #> # A tibble: 6 × 2 #>    ID_t ts2912m               #>   <dbl> <dbl+lbl>             #> 1    NA  NA                   #> 2     1 -97 [refused]         #> 3     2  24 [Spring/Easter]   #> 4     3   5 [May]             #> 5    24  32 [End of the year] #> 6     5  30 [Fall]             df_neps_replaced <- replace_season_codes(df_neps) print(df_neps_replaced) #> # A tibble: 6 × 2 #>    ID_t ts2912m        #>   <dbl> <dbl+lbl>      #> 1    NA  NA            #> 2     1 -97 [refused]  #> 3     2   4 [April]    #> 4     3   5 [May]      #> 5    24  12 [December] #> 6     5  10 [October]"},{"path":"https://a-helbig.github.io/nepstools/reference/replace_values_with_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Set missings in dataframe to NA — replace_values_with_na","title":"Set missings in dataframe to NA — replace_values_with_na","text":"`replace_values_with_na()` sets NEPS specific missing codes NA. Default missing codes c(seq(-99, -90), seq(-56, -51), seq(-29, -22)). specific variables taken account, use vars argument supply vector variable names.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_values_with_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set missings in dataframe to NA — replace_values_with_na","text":"","code":"replace_values_with_na(   data,   vars = NULL,   values_to_replace = c(seq(-99, -90), seq(-56, -51), seq(-29, -22)) )"},{"path":"https://a-helbig.github.io/nepstools/reference/replace_values_with_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set missings in dataframe to NA — replace_values_with_na","text":"data dataframe apply function . vars Specify variables missing values replaced NA. set NULL, variables used. values_to_replace Specify values replaced NA. Default standard NEPS missing codes.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_values_with_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set missings in dataframe to NA — replace_values_with_na","text":"dataframe.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/replace_values_with_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set missings in dataframe to NA — replace_values_with_na","text":"","code":"# Example with NEPS SC6 semantic structures spGap file path <- system.file(\"extdata\", \"SC6_spGap_S_15-0-0.dta\", package = \"nepstools\") df_neps <- read_neps(path, english = TRUE, col_select = c(\"ID_t\", \"ts2912m\"))  # create some artificial datapoints artificial_datapoints <- data.frame(  ID_t = c(1, 2, 3, 4, 5),  ts2912m = c(-97, 12, NA, 4, -98))  # add these artificial datapoints to the empty neps dataset df_neps <- rbind(df_neps, artificial_datapoints) print(df_neps) #> # A tibble: 6 × 2 #>    ID_t ts2912m          #>   <dbl> <dbl+lbl>        #> 1    NA  NA              #> 2     1 -97 [refused]    #> 3     2  12 [December]   #> 4     3  NA              #> 5     4   4 [April]      #> 6     5 -98 [don't know]  df_neps_replaced <- replace_values_with_na(df_neps) print(df_neps_replaced) #> # A tibble: 6 × 2 #>    ID_t ts2912m       #>   <dbl> <dbl+lbl>     #> 1    NA NA            #> 2     1 NA            #> 3     2 12 [December] #> 4     3 NA            #> 5     4  4 [April]    #> 6     5 NA             # Example with a vector v <- c(1, -97, 3, -29, 5) replace_values_with_na(v) #> [1]  1 NA  3 NA  5"},{"path":"https://a-helbig.github.io/nepstools/reference/switch_var_names.html","id":null,"dir":"Reference","previous_headings":"","what":"A Helper to switch variable names in NEPS data to original instrument variable names. This feature is inspired by stata nepstools ","title":"A Helper to switch variable names in NEPS data to original instrument variable names. This feature is inspired by stata nepstools ","text":"Helper switch variable names NEPS data original instrument variable names. feature inspired stata nepstools \"charren\" function. Background: data preparation process NEPS SUFs, original variable names survey instruments replaced SUF-specific variable names. However, data users may useful get original instrument names. function provides quick way , utilizing metadata \"NEPS_alias\" stored within datasets loaded read_neps function.","code":""},{"path":"https://a-helbig.github.io/nepstools/reference/switch_var_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Helper to switch variable names in NEPS data to original instrument variable names. This feature is inspired by stata nepstools ","text":"","code":"switch_var_names(data)"}]
