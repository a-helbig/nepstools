% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc_functions.R
\name{expand}
\alias{expand}
\title{Expand data}
\usage{
expand(data, duration)
}
\arguments{
\item{data}{A dataframe.}

\item{duration}{Specify the integer variable to be used for expanding the data. You can provide this variable either as a quoted string or unquoted variable name. Typically, this is a duration (e.g., episode length) variable. It must be a numeric vector containing only non-negative integers, with no missing (NA) values. Note: If there are zeros in the duration variable, the function will delete these rows. So make sure, that any generated duration variables are > 1 without NAs.}
}
\value{
A Dataframe.
}
\description{
`expand()` duplicates rows by a integer variable specified in the duration argument, typically a months counter. It is inspired by statas expand function and often used in the context of episode data that must be transformed into monthly data.
}
\examples{

path <- system.file("extdata", "SC6_spGap_S_15-0-0.dta", package = "nepstools")
df_neps_ex <- read_neps(path, col_select = c("ID_t", "ts2911m", "ts2911y", "ts2912m", "ts2912y"))
df_neps_ex <- df_neps_ex[-1,] # get rid of NA row that is in every semantic structure file from NEPS

# create some artificial datapoints
artificial_datapoints <- data.frame(
  ID_t = c(1, 2, 3, 4, 5),
 ts2911m = c(2, 12, 11, 4, 12),
  ts2911y = c(2008, 2006, 2005, 2009, 2010),
  ts2912m = c(4, 1, 2, 5, 2),
  ts2912y = c(2008, 2007, 2006, 2009, 2011)
)

# add these artificial datapoints to the empty neps dataset
df_neps_ex <- rbind(df_neps_ex, artificial_datapoints)

# generate date and duration variables
df_neps_ex <- df_neps_ex |>
  dplyr::mutate(start = ((ts2911y-1960)*12)+ts2911m - 1, # months since january 1960
  end = ((ts2912y-1960)*12)+ts2912m - 1, # months since january 1960
  duration = (end - start) + 1) # + 1 required so we dont get episode durations of 0 months

print(df_neps_ex)

# expand the dataframe
expanded_df <- nepstools::expand(df_neps_ex, duration)
print(expanded_df)

}
